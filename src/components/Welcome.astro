---
import { Image } from 'astro:assets';
import astroLogo from '../assets/astro.svg';
import background from '../assets/background.svg';
import sphere from '../assets/sphere.svg';
import Nicole from '../assets/nicole.jpg';
// const backgroundUrl = `url(${Nicole.src})`;
import Button from './atoms/Button.astro';
import Dots from './SvgDots.svg';
const backgroundUrl = `url(${Dots.src})`;
---
<div id="container">

<h2 class="name">NICOLE ORCHARD</h2>
<div class="buttons">
	<Button href="mailto:norchard24@gmail.com">Email</Button>
	<Button href="https://github.com/norchard">Github</Button>
	<Button href="https://www.linkedin.com/in/nicole-orchard/">LinkedIn</Button>
</div>
<div class="grid">
    <section class="section mask">
        <svg id="svg-mask" width="100%" height="100%" viewBox="0 0 1920 1080" preserveAspectRatio="xMidYMid slice">
            <defs>
                <mask id="mask">
						<rect width="100%" height="100%" fill="#fff"></rect>
                       <path id="inner-mask" d="
                                M 954.558 485.399
								m 180, 0
								a 180,180 0 1,0 -360,0
								a 180,180 0 1,0  360,0"/>
                </mask>
            </defs>
            <g>
				<defs>
					<radialGradient id="ffflux-gradient">
						<stop offset="0%" stop-color="hsl(37, 39%, 80%)"></stop>
						<stop offset="100%" stop-color="hsl(353, 33%, 84%)"></stop>
				  </radialGradient>
				  <filter id="ffflux-filter" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
						<feTurbulence type="fractalNoise" baseFrequency="0.003 0.005" numOctaves="1" seed="71" stitchTiles="stitch" x="0%" y="0%" width="100%" height="100%" result="turbulence"></feTurbulence>
						<feGaussianBlur stdDeviation="46 14" x="0%" y="0%" width="100%" height="100%" in="turbulence" edgeMode="duplicate" result="blur"></feGaussianBlur>
						<feBlend mode="soft-light" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" in2="blur" result="blend"></feBlend>
			  		</filter>
				</defs>
				<rect mask="url(#mask" width="100%" height="100%" fill="url(#ffflux-gradient)" filter="url(#ffflux-filter)"></rect>
                <!-- <rect mask="url(#mask)" width="100%" height="100%" fill="#ab637b"></rect> -->
            </g>
        </svg>
        <h1 class="title">I am a web developer based in Houston, TX</h1>
		<div class="emojis">
			<h2 id="emoji-title">...a little more about me...</h2>
			<div class="emoji"><span>ü´ñ</span><h4 class="emoji-text">I practice ceramics occasionally</h4></div>
			<div class="emoji"><span>üá∏üá™</span><h4 class="emoji-text">I have dual US-Swedish citizenship</h4></div>
			<div class="emoji"><span>üßòüèº‚Äç‚ôÄÔ∏è</span><h4 class="emoji-text">I do yoga & bike to stay active</h4></div>
			<div class="emoji"><span>üé≤</span><h4 class="emoji-text">I organize a game night community</h4></div>
			<div class="emoji"><span>üõãÔ∏è</span><h4 class="emoji-text">I love<br/>interior design</h4></div>
		</div>  
    </section>
    <section class="section bio">
				<div class="intro center" id="bio">
                    I am a web developer by way of graphic design. The magic of the web has always enchanted me and when I started designing for web I instantly wanted to know how my designs were built.<br/>
					I studied computer science and worked at a map-making startup where I built api endpoints and learned about processing open-source data and managing global infrastructure.<br/>
					I currently work as a developer at an advertising agency where I specialize in email marketing and automations. I code emails, manage databases of subscribers, and build tools to improve efficiency.<br/>
					A recent accomplishment I am proud of is contributing a bug fix to the open-source MJML project. However, my favorite work to do is front-end development, especially working with animations!
				</div> 
    </section>	
</div>

<section class="spacer">
</section>

<!-- <section class="spacer">
	<div><h1 id="projects-heading">Projects</h1></div>
	<div id="project-grid">
		<div class="project">
			<h4 class="project-title">Minesweeper</h4>
			<p>Hello</p>
			<svg id="svgMain" fill="none" viewBox="0 0 500 130">
				<path d="M 65,65 Q 250,65 435,65" stroke="gray" stroke-width="5" stroke-opacity="0.2" stroke-linecap="round"></path>
				<path d="M 65,65 Q 250,65 435,65" stroke-width="5" stroke="url(#gradient)" stroke-opacity="1" stroke-linecap="round"></path>
				<defs>
				  <linearGradient class="gradient" id="gradient" gradientUnits="userSpaceOnUse" x1="-20%" x2="0%" y1="0%" y2="0%">
					<stop offset="0%" stop-color="#ff8709" stop-opacity="0"></stop>
					<stop offset="30%"stop-color="#ff8709"></stop>
					<stop offset="70%" stop-color="#f7bdf8"></stop>
					<stop offset="100%" stop-color="#f7bdf8" stop-opacity="0"></stop>
				  </linearGradient>
				</defs>
			  </svg>
		</div>
		<div class="project">
			<h4 class="project-title">Hangman</h4>
			<svg id="svgMain" fill="none" viewBox="0 0 500 130">
				<path d="M 65,65 Q 250,65 435,65" stroke="gray" stroke-width="5" stroke-opacity="0.2" stroke-linecap="round"></path>
				<path d="M 65,65 Q 250,65 435,65" stroke-width="5" stroke="url(#gradient)" stroke-opacity="1" stroke-linecap="round"></path>
				<defs>
				  <linearGradient class="gradient" id="gradient" gradientUnits="userSpaceOnUse" x1="-20%" x2="0%" y1="0%" y2="0%">
					<stop offset="0%" stop-color="#ff8709" stop-opacity="0"></stop>
					<stop offset="30%"stop-color="#ff8709"></stop>
					<stop offset="70%" stop-color="#f7bdf8"></stop>
					<stop offset="100%" stop-color="#f7bdf8" stop-opacity="0"></stop>
				  </linearGradient>
				</defs>
			  </svg>
		</div>
		<div class="project">
			<h4 class="project-title">NYC Public Art</h4>
			<svg id="svgMain" fill="none" viewBox="0 0 500 130">
				<path d="M 65,65 Q 250,65 435,65" stroke="gray" stroke-width="5" stroke-opacity="0.2" stroke-linecap="round"></path>
				<path d="M 65,65 Q 250,65 435,65" stroke-width="5" stroke="url(#gradient)" stroke-opacity="1" stroke-linecap="round"></path>
				<defs>
				  <linearGradient class="gradient" id="gradient" gradientUnits="userSpaceOnUse" x1="-20%" x2="0%" y1="0%" y2="0%">
					<stop offset="0%" stop-color="#ff8709" stop-opacity="0"></stop>
					<stop offset="30%"stop-color="#ff8709"></stop>
					<stop offset="70%" stop-color="#f7bdf8"></stop>
					<stop offset="100%" stop-color="#f7bdf8" stop-opacity="0"></stop>
				  </linearGradient>
				</defs>
			  </svg>
		</div>
		<div class="project">
			<h4 class="project-title">Art Collection</h4>
			<svg id="svgMain" fill="none" viewBox="0 0 500 130">
				<path d="M 65,65 Q 250,65 435,65" stroke="gray" stroke-width="5" stroke-opacity="0.2" stroke-linecap="round"></path>
				<path d="M 65,65 Q 250,65 435,65" stroke-width="5" stroke="url(#gradient)" stroke-opacity="1" stroke-linecap="round"></path>
				<defs>
				  <linearGradient class="gradient" id="gradient" gradientUnits="userSpaceOnUse" x1="-20%" x2="0%" y1="0%" y2="0%">
					<stop offset="0%" stop-color="#ff8709" stop-opacity="0"></stop>
					<stop offset="30%"stop-color="#ff8709"></stop>
					<stop offset="70%" stop-color="#f7bdf8"></stop>
					<stop offset="100%" stop-color="#f7bdf8" stop-opacity="0"></stop>
				  </linearGradient>
				</defs>
			  </svg>
		</div>
	</div>
</section> -->




	<!-- <h1>NICOLE ORCHARD</h1>
	<div id="scrollAnimation">
		<div id="hero">
			<Image id="circle" src={sphere} alt="sphere" />
			<Image id="intro" src={intro} alt="intro" />
			<h2 id="intro-text">I am a web developer based in Houston, TX</h2>
		</div>
	</div>
	<div id="hidden">
		<p id="bio">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
	</div>
	<div id="filler">

	</div> -->
</div>

<script is:inline src="https://cdn.jsdelivr.net/npm/gsap@3.12.7/dist/gsap.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/gsap@3.12.7/dist/ScrollTrigger.min.js"></script>
<script is:inline type="module">
	let bio = document.getElementById('bio');
	let htmlString = "";
	let spans = [];
	// console.log(bio.textContent)
	let paragraphs = bio.textContent.trim().split(/\r?\n/g);
	paragraphs = paragraphs.map(paragraph => paragraph.split(''));
	// console.log('paragraphs', paragraphs);
	let bioArray = bio.textContent.split('');
	for (let i = 0; i < paragraphs.length; i++){
		for (let j = 0; j < paragraphs[i].length; j++){
			htmlString += `<span class="highlight">${paragraphs[i][j]}</span>`
		}
		htmlString += `<br/><br/>`
	}


	// for (let i=0; i < bioArray.length; i++){
	// 	htmlString += `<span class="highlight">${bioArray[i]}</span>`
	// }
	bio.innerHTML = htmlString;
	spans = [...document.getElementsByClassName('highlight')];
	function revealSpans() {
		for (let i=0; i < spans.length; i++){
			if (spans[i].parentElement.getBoundingClientRect().top < window.innerHeight / 2){
				let {left, top} = spans[i].getBoundingClientRect();
				top = top - window.innerHeight * .39;
				let opacityValue = 1 - ((top * 0.1) + (left * 0.008)) < 0.1 ? 0.05 : 1 - ((top * 0.1) + (left * 0.008)).toFixed(3);
				opacityValue = opacityValue > 1 ? 1 : opacityValue.toFixed(3);
				spans[i].style.opacity = opacityValue;
			}
		}
		document.getElementById('bio').style.opacity = 1;
	}

	window.addEventListener('scroll', () => {
		revealSpans();
	});
	revealSpans();



// let gradientAnimation = gsap.to("#ffflux-gradient", { duration: 5,
// 							attr: { gradientTransform: "rotate(0 0.5 0.5)",
// 								repeat: true,
// 								repeatDelay: 0,
// 								yoyo: true
// 							}
// 						});

// text.addEventListener(".section.mask", () => animation.play());

	// let circle = document.getElementById("circle");
	// let zoomCircle = () => {
	// 	circle.
	// }
	// import { gsap } from '../node_modules/gsap/index.js';	
	// import { ScrollTrigger } from "../node_modules/gsap/ScrollTrigger";

	gsap.registerPlugin(ScrollTrigger);

	const svg = document.querySelector("#svg-mask");
const maskTitle = document.querySelector(".title");
const circle = document.querySelector("#inner-mask");

gsap.set(maskTitle, {
  y: circle.getBoundingClientRect().height / 2
});
gsap.set(circle, {
  transformOrigin: "center center"
});


// var move = gsap.timeline({ repeat: -1 })

// move.to(circle, {
// 	x: gsap.utils.random(-300, 300),
// 	y: gsap.utils.random(-300, 300),
// 	ease: 'sine',
// 	repeat: -1,
//   	repeatRefresh: true,
// })

// gsap.set(circle, {
//   x: 1920 / 2,
//   y: 1080 / 2,
//   opacity: 1
// });

// let t;

// const createTween = () => {
//   t && t.revert();
//   t = gsap.to(circle, {
//     duration: 2,
//     x: () => gsap.utils.random(-(1920/2), 1920/2, 1),
//     y: () => gsap.utils.random(-(1080/2), 1080/2, 1),
//     repeat: -1,
//     //repeatDelay: 1,
//     ease: "power1.inOut",
//     repeatRefresh: true
//   });
// };

// window.addEventListener("resize", createTween);
// createTween();


const circleExplore = (x, y) => {
	return gsap.to(circle, {
		x: () => x,
		y: () => y,
		// repeat: -1,
		//repeatDelay: 1,
		// ease: "power1.inOut",
		// repeatRefresh: true,
		// onUpdate: function(){console.log('hi!')},
	});
}

document.addEventListener('mousemove', (event) => {
	circleExplore(calculateSvgPosition(event.clientX, 'x'), calculateSvgPosition(event.clientY, 'y'));
	// console.log("hello");
	// console.log(calculateSvgPosition(event.clientX, 'x'));
	// console.log(calculateSvgPosition(event.clientY, 'y'));
});

// circle.addEventListener('click',  (event) => {
// 	console.log('yes')
// 	console.log(calculateSvgPosition(event.clientX, 'x'));
// 	circleExplore(calculateSvgPosition(event.clientX, 'x'), calculateSvgPosition(event.clientY, 'y'));
// 	console.log("um");
// });

let calculateSvgPosition = (coordinate, dimension) => {
	let screen = dimension === 'y' ? window.innerHeight : window.innerWidth;
	let svgScreen = dimension === 'y' ? 1080 : 1920;
	let svgDistance = ((coordinate)/screen)*svgScreen - (svgScreen/2);
	return svgDistance
}

// Setup a timeline for the Mask and text
var tl = gsap.timeline({
  scrollTrigger: {
    trigger: '.mask',
    pin: true,
	// markers: true,
    start: "top top",
    end: window.innerWidth * 1.1,
    scrub: 0.2,
    pinSpacing: false,
  },
  defaults: {
    duration: 2,
    ease: "power3"
  }
}).to(maskTitle, {
  opacity: 0,
  duration: 0.15,
  filter: "blur(8px)",
  transform: 'translateY(-20%)',
  scale: 2
}, 0).to(circle, {
  scale: 35,
  yPercent: -550,
  duration: 4
}, 0); 


window.addEventListener("load", init);
window.addEventListener("resize", resize);

function init() {
  resize();
}

function resize() {
  tl.progress(0);
  tl.invalidate();
  ScrollTrigger.refresh();
}

let limit = {max: 500, pullRatio: 0},
    getRandom = () => gsap.utils.random(-limit.max, limit.max),
    round = value => Math.round(value * 10000) / 10000,
    safeNum = value => round(value) || 0, // avoids NaN like if you do 0 / 0.
    getModifierPixels = home => value => {
      value = parseFloat(value);
      return round(value + (home - value) * limit.pullRatio) + "px";
    },
    getModifierDegrees = home => value => {
      value = parseFloat(value);
      return round(value + (home - value) * limit.pullRatio) + "deg";
    };

gsap.utils.toArray(".emoji").forEach((element) => wander(element, gsap.getProperty(element, "x"), gsap.getProperty(element, "y"), gsap.getProperty(element, "rotation")));
const array = gsap.utils.toArray(".emoji-text");


	gsap.to(array, {
		opacity: 1,
		stagger: .2,
		yPercent: -100,
		duration: 1,
		ease: 'back.out',
		scrollTrigger: {
			trigger: ".spacer",
			start: "top bottom",
			// markers: true,
			toggleActions: "restart none none reverse",
			// scrub: true,
		}
	})

	// const spots = gsap.utils.toArray(".spot");
	// console.log(spots);
	// gsap.to(spots, {
	// 	x: gsap.utils.random(-10,10),
	// 	y: gsap.utils.random(-10,10),
	// 	stagger: .2,
	// 	duration: 1,
	// 	ease: 'back.out',
	// 	scrollTrigger: {
	// 		trigger: ".spacer",
	// 		start: "top bottom",
	// 		// markers: true,
	// 		toggleActions: "restart none none reverse",
	// 		// scrub: true,
	// 	}
	// })

// function fadeIn (element) {
// 	gsap.to(element, {
// 		opacity: 1,
// 		duration: .5,
// 		ease: bounce,
// 		stagger: true,
// 		scrollTrigger: {
// 			trigger: ".spacer",
// 			start: "top bottom",
// 			markers: true,
// 	}
// 	})
// }

function wander(element, homeX, homeY, homeRot) {
  gsap.set(element, {
    x: safeNum(homeX + (gsap.getProperty(element, "x") - homeX) / (1 - limit.pullRatio)),
    y: safeNum(homeY + (gsap.getProperty(element, "y") - homeY) / (1 - limit.pullRatio)),
    rotation: safeNum(homeRot + (gsap.getProperty(element, "rotation") - homeRot) / (1 - limit.pullRatio))
  });
  gsap.to(element, {
    x: homeX + getRandom(),
    y: homeY + getRandom(),
    rotation: homeRot + getRandom(),
    modifiers: {
      x: getModifierPixels(homeX),
      y: getModifierPixels(homeY),
      rotation: getModifierDegrees(homeRot)
    },
    duration: gsap.utils.random(5, 10), 
    ease: "sine.inOut",
    onComplete: () => wander(element, homeX, homeY, homeRot)
  });
}

// pull toward "home" position more and more as you scroll down
gsap.to(limit, {
  pullRatio: 1,
  ease: "none",
  scrollTrigger: {
    trigger: ".intro",
    // pin: true,
    start: 0,
    end: "bottom bottom-=500",
    scrub: true
  }
});

gsap.to('#emoji-title', {
	opacity: 1,
	duration: .5,
	yPercent: -10,
	ease: 'back.out',
	scrollTrigger: {
		trigger: ".spacer",
		start: "-30px bottom",
		// markers: true,
		toggleActions: "restart none none reverse",
	}
})

gsap.to('.spacer', {
  width: window.innerWidth,
  ease: "power3",
  scrollTrigger: {
	snap: 1,
    trigger: ".spacer",
    // pin: true,
    start: "top bottom-=100",
    end: "bottom bottom-=100",
    scrub: true,
	// markers: true,
	// snap: {
    //   snapTo: 1 / (sections.length - 1),
    //   duration: 0.1,
    //   delay: 0.1,
    //   ease: "power1.inOut",
    // },
  }
});

gsap.to('#projects-heading', {
  fontSize: '50px',
  scrollTrigger: {
	snap: 1,
    trigger: ".spacer",
    // pin: true,
    start: "top bottom-=100",
    end: "bottom bottom-=100",
    scrub: true,
	// markers: true,
	// snap: {
    //   snapTo: 1 / (sections.length - 1),
    //   duration: 0.1,
    //   delay: 0.1,
    //   ease: "power1.inOut",
    // },
  }
});

window.addEventListener('reload', window.scrollTo(0, 0))
window.history.scrollRestoration = "manual"
ScrollTrigger.clearScrollMemory( "manual" )



let projects = document.getElementsByClassName('project')
console.log(projects);
for (let i = 0; i < projects.length; i++){
	let hovered =  projects[i].querySelector('linearGradient');
	let animation = gsap.to(hovered, {
			attr: { x1: "100%", x2: "120%" },
			repeat: -1,
			duration: 2,
			ease: "sine.inOut",
			paused: true
		});
	projects[i].addEventListener('mouseenter', () => {
		console.log('hover')
		animation.play(2);
	});
	projects[i].addEventListener('mouseout', () => {
		animation.pause(2);
	});
};




/*
var blend = gsap.timeline()
.to('body', {backgroundColor:'#373434', duration:1})
.to(action, {timeScale:0, duration:0.5},0)
*/
/* // doesn¬¥t work
.to(boxes, {
    xPercent:-50, 
    x:function(i) { 
      return (120 * i) - 120; },
    yPercent:-50, y:0,
    rotation:0, 
    duration:1, ease:'power2.in',
    overwrite:true
  }, 0.5)
*/
/*
ScrollTrigger.create({
  start: 0,
  end: "+=1000",
  scrub:0.3,
  animation: blend
});
*/


	 // use a script tag or an external JS file
	//  document.addEventListener("DOMContentLoaded", (event) => {
	// 	console.log(event);
	// 	gsap.registerPlugin(ScrollTrigger);
	// 	console.log("hi");

	// 	let scrollAnimation = gsap.timeline({
	// 		scrollTrigger: {
	// 			trigger: "#scrollAnimation",
	// 			scrub: true,
	// 			pin: true,
	// 			start: "top top",
   	// 			end: "bottom +=50%",
	// 			markers: true,
	// 			invalidateOnRefresh: true,
	// 			pinSpacing: true,
	// 		}
	// 	});

	// 	scrollAnimation.to('#circle', {scale: 70, xPercent: 2130, transaformOrigin: "10 10", duration: 1.5})

	// 	let split = new SplitText("#hidden p", { type: "lines" });
	// 	let tlSection2 = gsap.timeline({
	// 	scrollTrigger: {
	// 		trigger: "#hidden",
	// 		start: "30% 50%",
	// 		toggleActions: 'play pause play reset',
	// 	}
	// 	});
	// 	tlSection2.from(split.lines, {
	// 	opacity: 0,
	// 	y: 100,
	// 	stagger: 0.1
	// 	});
	//  });
</script>

<style define:vars={{ backgroundUrl }}>
/* <style define:vars={{ Dots }}> */
html, body {
  margin: 0;
  padding: 0;
  font-family: 'Archivo';
  background-color: #232730;
  /* background: linear-gradient(#fff, #444); */
}

#project-grid {
	display: grid;
	grid-template-columns: repeat(2, minmax(150px, 2fr));
  	grid-template-rows: repeat(2, minmax(150px, 2fr));
	margin: 0px 200px;
}

.project {
	background-color: #18191b;
	margin: 20px;
	text-align: center;
	opacity: .9;
	color: #e4e4e4;
}

#projects-heading {
	padding: 60px 0px;
	font-size: 20px;
	color: #e4e4e4;
	font-weight: 900;
}

section.spacer {
  height: 0vh;
  width: 70vw;
  /* background-color: #926161; */
  margin: 0 auto;
  background-image: var(--backgroundUrl);
  background-size: cover;
  /* display: flex; */
  align-items: center;
  text-align: center;
  /* padding: 60px 100px; */
  justify-content: center;
}

.grid {
  background: #232730 no-repeat fixed;
  /* background-image: linear-gradient(to bottom, #612d4b, #5f2d54, #592e5f, #503169, #413574, #333f7c, #204781, #004f85, #005c83, #0b667d, #346f77, #517774); */
  /* background-image: url("https://host-photos.s3.us-east-2.amazonaws.com/colorful-modern-artistic-abstract-vector-hero-header-1920x1080.jpg-nggid044773-ngg0dyn-1920x1080x100-00f0w010c010r110f110r010t010.jpg"); */
  background-size: cover;
  position: relative;
  /* background-blend-mode:difference; */
  color: #fff;
}

#bio {
  position: relative;  
  top: -74vh;
  font-size: 2.5vw;
  max-width: 25ch;
  margin: auto;
  color: #ffffff;
  /* padding-bottom: 300px; */
  line-height: 3.5vw;
  /* text-align: justify; */
  font-weight: 500;
  z-index: 0;
  opacity: 0;
  padding-top: 130px;
}

.name {
  position: fixed;
  top: 0px;
  left: calc(50% - 125px);
  z-index: 2000;
  mix-blend-mode:screen;
  color: #9ed3b0;
  font-weight: 700;
  padding: 5px 15px;
  /* background-color: #232730; */
  border-radius: 5px;
}

.name:hover {
	/* color: #c6de12; */
	/* background-color: #232730; */
	padding: 5px 15px;
	/* mix-blend-mode: multiply; */
	border-radius: 5px;
}

.pin-spacer {
	pointer-events: none;
}

.section.mask {
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  color: #000000;
  z-index: 1000;
}

.section.bio {
	position: relative;
	/* height:fit-content; */
}

.title {
  font-size: 6vw;
  line-height: 1.2;
  text-align: center;
  color: #8ed5ad;
  max-width: 20ch;
  margin: auto;
  z-index: 100;
  font-weight: 900;
  mix-blend-mode:color-dodge;
  position: absolute;
  bottom: 60vh;
  pointer-events: none;
  opacity: 1;
}

#svg-mask {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100vh;
}

#container {
	position: absolute;
	top: 0px;
	height: 100vh;
	width: 100vw;
	margin: 0px;
	background-color: #926161;
	font-family: Archivo;
}

.emojis {
	display: flexbox;
	width: 100vw;
	height: 40vh;
	z-index: -1;
	text-align: center;
	margin-bottom: 300px;
	padding-top: 600px;
	/* background-color: #e43ead; */
}

.emoji {
	font-size: 65px;
	display: inline-block;
	padding: 40px;
	text-align: center;
	width: 100px;
}

.emoji-text {
	font-size: 17px;
	line-height: 20px;
	max-width: 100px;
	text-align: left;
	position: fixed;
	color: #8ed5ad;
	text-align: center;
	opacity: 0;
	top: 180px;
	font-weight: 500;
	/* vertical-align: top; */
}
#emoji-title {
	padding: 0px 0px 0px 0px;
	font-size: 2vw;
	font-weight: 400;
	margin-bottom: 0px;
	opacity: 0;
	color: #8ed5ad;
}
#emoji-container {
	height: 700px;
	background-color: #000000;
}
.buttons {
	position: fixed;
	z-index: 2000;
	padding: 20px;
	bottom: 0;
	left: calc(50vw - 145px);
}
.button {
	background-color: #f1f2ec;
	color: black;
	width: 50px;
	text-align: center;
	opacity: 1;
	/* transition: all ease-in-out; */
}
.button:hover {
	background-color: #8ed5ad;
	opacity: 1;
	/* transition: all ease-in-out; */
}
  /* .pin-spacer {
		padding: 0px !important;
		height: auto !important;
	}
	#intro {
		width: 100vw;
		padding: 0px;
		margin: 0px;
		height: auto;
	}
	#scrollAnimaiton {
		position: relative;
		height: auto;
		overflow: hidden;
		padding: 0px;
		margin: 0px;
	}
	#container {
		position: absolute;
		top: 0px;
		height: 100vh;
		width: 100vw;
		margin: 0px;
		background-color: #926161;
		font-family: Archivo;
	}
	#hero {
		align-items: center;
		height: calc(100vh - 74.5px);
		margin: 0px;
		display: flex;
		flex-direction: column;
		align-content: space-between;
		overflow: hidden;
		position: fixed;
		top: 0px;
	}
	#circle {
		height: 300px;
		width: 300px;
		padding-top: 100px;
	}
	#intro-text {
		position: absolute;
		bottom: 0px;
		margin: 0px;
	}
	h1 {
		text-align: center;
		color: #ebb9b9;
		mix-blend-mode: color-dodge;
		position: fixed;
		left: calc(50vw - 140px);
		top: 0px;
		z-index: 200;
		margin: 20px 0px;
	}
	h2 {
		font-weight: 900;
		font-size: 9vw;
		line-height: 7vw;
		color: #232222;
		align-self: left;
	}
	#hidden {
		position: absolute;
		align-content:space-around;
		background-color: #232222;
		top: 0px;
		height: 100vh;
		width: 100vw;
		padding: 0px;
		margin: 0px;
		z-index: 10;
	}
	#bio {
		max-width: 700px;
		color: #fff;
		margin: 0px auto;
		font-size: 30px;
		line-height: 40px;
		font-weight: 500;
	}
	#filler {
		align-content:space-around;
		background-color: #232222;
		top: 0px;
		height: 100vh;
		width: 100vw;
		padding: 0px;
		margin: 0px;
	}  */
</style>

